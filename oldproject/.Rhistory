local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
require(httpuv)
load httpuv
?load
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "b3e428c8dba7c32c255b", secret="998f8160d26c4080d92e54bb4d42e7360da4e386")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "b3e428c8dba7c32c255b", "998f8160d26c4080d92e54bb4d42e7360da4e386")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic")
:
;
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic")
;
a<-BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic")
getwd()
setwd("C:/Users/SR/education/Datascience")
Trainingdata<- read.csv(."/datacleaningproject/courseprojectwork/UCI HAR Dataset/train/X_train.txt")
Trainingdata<- read.csv("/datacleaningproject/courseprojectwork/UCI HAR Dataset/train/X_train.txt")
getwd()
Trainingdata<- read.csv("/datacleaningproject/courseprojectwork/UCIHARDataset/train/X_train.txt")
Trainingdata<- read.csv("/datacleaningproject/courseprojectwork/UCIHARDataset/train/X_train.txt")
Trainingdata<- read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/train/X_train.txt")
Trainingdata
Trainingdata(dim)
?dim
dim(Trainingdata)
Trainingdata<- read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/train/X_train.txt",, sep="", nrows = nrows, header=FALSE)
Trainingdata<- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/train/X_train.txt", sep="", nrows = nrows, header=FALSE)
?read.csv
Trainingdata<- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/train/X_train.txt",header=FALSE,sep="")
dim(Trainingdata)
Trainingdata[,562]<- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/train/Y_train.txt",header=FALSE,sep="")
dim(Trainingdata)
Trainingdata[,563]<- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/train/subject_train.txt",header=FALSE,sep="")
dim(Trainingdata)
Testdata<- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/test/X_test.txt",header=FALSE,sep="")
dim(Testdata)
Testdata[,562] <- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/test/y_test.txt",header=FALSE,sep="")
dim(Testdata)
Testdata[,563] <- read.csv ("./datacleaningproject/courseprojectwork/UCIHARDataset/test/subject_test.txt",header=FALSE,sep="")
ActivityLabels = read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/activity_labels.txt", sep="", header=FALSE)
ActivityLabels
Features = read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/features.txt", sep="", header=FALSE)
Features <- read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/features.txt", sep="", header=FALSE)
Features
Features
Features <- read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/features.txt", sep="", header=FALSE)
dim(Features)
?gsub
Features[,2] = gsub('-mean', 'Mean', Features[,2])
Features
Features[,2] = gsub('-std', 'Std', Features[,2])
Features[,2] = gsub('-mean', 'Mean', Features[,2])
Features[,2] = gsub('-()','','Mean', Features[,2])
allData = rbind(Trainingdata, Testdata)
dim(allData)
colsWeWant <- grep(".*Mean.*|.*Std.*", Features[,2])
colswewant
colsWeWant <- grep(".*Mean.*|.*Std.*", Features[,2])
colswewant
colsWewant
colsWeWant
Features[,2]
Features <- read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/features.txt", sep="", header=FALSE)
Features
dim(Features)
FeaturesMod[,2] = gsub('-std', 'Std', Features[,2])
FeaturesMod<- gsub('-std', 'Std', Features[,2])
FeaturesMod2<- gsub('-mean', 'Mean',FeaturesMod[,2] )
FeaturesMod[,2]<- gsub('-mean', 'Mean',FeaturesMod[,2] )
Features <- read.csv("./datacleaningproject/courseprojectwork/UCIHARDataset/features.txt", sep="", header=FALSE)
Features
dim(Features)
Features[,2]<-gsub('-std', 'Std', Features[,2])
dim(Features)
Features
Features[,2] <-gsub('-mean', 'Mean', Features[,2])
Features
Features
Features[,2] <- gsub('[-()]', '', features[,2])
Features[,2] <- gsub('[-()]', '',Features[,2])
dim(Features)
Features
dim(allData)
colsWeWant <- grep(".*Mean.*|.*Std.*", Features[,2])
colswewant
colsWeWant
dim(colsWeWant)
colsWeWant
Features <- Features[colsWeWant,]
dim(Features)
?c
features <- features[colsWeWant,]
features <- Features[colsWeWant,]
dim(Features)
colsWeWant <- c(colsWeWant, 562, 563)
MeanAndStdData<-allData[,colsWeWant]
dim(MeanAndStdData)
Features$V2
?$V
?$V2
colnames(MeanAndStdData) <- c(features$V2, "Activity", "Subject")
dim(colnames)
dim(colnames[])
colnames(MeanAndStdData
)
colnames<- c(features$V2, "Activity", "Subject")
colnames
colnames<- c(features$V2, "Activity", "Subject")
colnames
allData
dim(allData)
colsWeWant
dim(colsWeWant)
Features
colsWeWant <- c(colsWeWant, 562, 563)
colsWeWant
MeanAndStdData<-allData[,colsWeWant]
dim(MeanAndStdData)
?colnames
colnames
Features
dim(MeanAndStdData)
colsWeWant()
colsWeWant
colnames(MeanAndStdData) <- c(Features$V2, "Activity", "Subject")
MeansAndStdData
MeanAndStdData
MeanAndStdData[1,]
Dim(MeanAndStdData)
dim(MeanAndStdData)
Features
colsWeWant
Dim(Features)
dim(Features)
colsWeWant <- grep(".*Mean.*|.*Std.*", Features[,2])
Features <- Features[colsWeWant,]
dim(Features)
colsWeWant <- c(colsWeWant, 562, 563)
rnows(colsWeWant)
nrows(colsWeWant)
?num
colsWeWant
MeanAndStdData<-allData[,colsWeWant]
dim(MeanAndStdData)
colnames(MeanAndStdData) <- c(Features$V2, "Activity", "Subject")
dim(MeanAndStdData)
MeanAndDataHeading<-MeanAndData
MeanAndStdDataHeader<-MeanAndStdData
MeanAndStdDataHeader
MeanAndStdDataHeader[1,]
MeanAndStdDataHeader[1,10]
MeanAndStdDataHeader[1,1:10]
?tolower
Activity = 1
for (currentActivityLabel in activityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(Activity, currentActivityLabel, MeanAndStdDataHeader$activity)
Activity <- Activity + 1
}
Activity = 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(Activity, currentActivityLabel, MeanAndStdDataHeader$activity)
Activity <- Activity + 1
}
Activity = 1
for (ActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(Activity,ActivityLabel, MeanAndStdDataHeader$activity)
Activity <- Activity + 1
}
currentActivity = 1
for (currentActivityLabel in activityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
currentActivity <- currentActivity + 1
}
currentActivity = 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
currentActivity <- currentActivity + 1
}
MeanAndStdDataHeader[1,]
MeanAndStdDataHeader$Activity
currentActivity=1
ActivityLabels$currentActivity
ActivityLabels[1]
ActivityLabels[1,1]
ActivityLabels$V1
ActivityLabels$1
ActivityLabels$V1
ActivityLabels
ActivityLabels$V2
ActivityLabels$V1,1
currentActivity = 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
currentActivity <- currentActivity + 1
}
currentActivity <- 1
> for (currentActivityLabel in ActivityLabels$V2) {
+     MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
+     currentActivity <- currentActivity + 1
+ }
currentActivity <- 1for (currentActivityLabel in ActivityLabels$V2) {
+     MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
+     currentActivity <- currentActivity + 1
+ }
currentActivity <- 1for (currentActivityLabel in ActivityLabels$V2) {
+     MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
+     currentActivity <- currentActivity + 1
+ }
currentActivity <- 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
currentActivity <- currentActivity + 1
}
gsub
?gsub
currentActivity <- 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$activity)
currentActivity <- currentActivity + 1
}
currentActivity
currentActivityLabel
MeanAndStdDataHeader$Activity
MeanAndStdDataHeader$activity
currentActivity <- 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$Activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$Activity)
currentActivity <- currentActivity + 1
}
MeandAndStdHeader
MeandAndStdDataHeader
MeanAndStdDataHeader
currentActivity <- 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$Activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$Activity)
currentActivity <- currentActivity + 1
}
MeanAndStdDataHeader$Activity
?as.factor
?as.factor
?aggregate
list(activity = allData$activity)
list(activity = MeanAndStdDataHeadera$activity)
list(activity = MeanAndStdDataHeader$activity)
?list
MeanAggbySubjectandActivity <-aggregate(MeanAndStdDataHeader,by=list(activity = MeanAndStdDataHeader$activity, subject=MeanAndStdDataHeader$subject), mean)
tidy =aggregate(MeanAndStdDataHeader,by=list(activity = MeanAndStdDataHeader$activity, subject=MeanAndStdDataHeader$subject), mean)
MeanAggbySubjectandActivity <- aggregate (MeanAndStdDataHeader,by=list(activity = MeanAndStdDataHeader$activity, subject=MeanAndStdDataHeader$subject), mean)
tidy <- aggregate (MeanAndStdDataHeader,by=list(activity = MeanAndStdDataHeader$activity, subject=MeanAndStdDataHeader$subject), mean)
MeanAndStdDataHeader$activity <- as.factor(MeanAndStdDataHeader$activity)
tidy <- aggregate (MeanAndStdDataHeader,by=list(activity = MeanAndStdDataHeader$Activity, subject=MeanAndStdDataHeader$subject), mean)
tidy = aggregate (MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, subject=MeanAndStdDataHeader$subject), mean)
MeanAndStdDataHeader$Activity <- as.factor(MeanAndStdDataHeader$Activity)
MeanAndStdDataHeader$Subject <- as.factor(MeanAndStdDataHeader$Subject)
MeanAndStdDataHeader$Subject
MeanAndStdDataHeader$Activity
tidy = aggregate (MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, subject=MeanAndStdDataHeader$subject), mean)
tidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
warning()
warning
?warning
tidy
tidy
tidy[1,1]
tidy[1,1:10]
dim(tidy)
MeanAndStdDataHeader$Activity <- as.factor(MeanAndStdDataHeader$Activity)
MeanAndStdDataHeader$Subject <- as.factor(MeanAndStdDataHeader$Subject)
tidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
warning
?warning
dim[tidy]
dim(tidy)
write.table(tidy, "tidy.txt", sep="\t")
MeanAndStdDataHeader
MeanAndStdDataHeader[1,]
MeanAndStdDataHeader[2,]
MeanAndStdDataHeader[2,1]
currentActivity <- 1
for (currentActivityLabel in ActivityLabels$V2) {
MeanAndStdDataHeader$Activity <- gsub(currentActivity, currentActivityLabel, MeanAndStdDataHeader$Activity)
currentActivity <- currentActivity + 1
}
MeanAndStdDataHeader$Activity <- as.factor(MeanAndStdDataHeader$Activity)
MeanAndStdDataHeader$Subject <- as.factor(MeanAndStdDataHeader$Subject)
tidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
tidy[1,1]
tidy[1,2]
tidy
write.table(tidy, "tidy.txt")
tidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
?warning()
warning(, call = TRUE, immediate = TRUE, noBreaks. = FALSE,
domain = NULL)
warning(, call = TRUE, immediate = TRUE, noBreaks. = FALSE, domain = NULL)
warning( call = TRUE, immediate = TRUE, noBreaks. = FALSE, domain = NULL)
tidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
warning(50)
write.table(tidy, "tidy.txt", sep="\t")
tidy[1,2]
tidy[1,1]
warn=1
tidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
warning(1)
tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
warning()
warning("tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)")
warning option
?warning option
options(warning=2)
warning("tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)")
tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
?options
options()
file<-options()
write(file)
?write
save(file)
filewarn<-options()
save(filewarn)
save(file=filewarn)
?save
save(file= "filewarn")
save(file = "filewarn")
filewarn
options.warning
options$warning
set options
options(warn=1)
options()
?options()
tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
tidy[,90]=NULL
tidy[,89]=NULL
write.table(tidy, "tidy.txt", sep="\t")
tidy <- aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
tidy[,90]=NULL
tidy[,89]=NULL
write.table(tidy, "tidy.txt", sep="\t")
dim(tidy)
write.table(tidy, "tidy.txt", row.names= FALSE, sep="\t")
?write.table
write.table(tidy, "tidy.txt", row.names= FALSE, sep="\t")
Independenttidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
Independenttidy = aggregate(MeanAndStdDataHeader,by=list(Activity = MeanAndStdDataHeader$Activity, Subject=MeanAndStdDataHeader$Subject), mean)
dim(independenttidy)
dim(Independenttidy)
Independenttidy[,90]=NULL
Independenttidy[,89]=NULL
write.table(Independenttidy, "Independenttidy.txt", row.names= FALSE, sep="\t")
dim(MeanAndStdDataHeader)
MeanAndStdDataHeader[1]
MeanAndStdDataHeader[,1]
MeanAndStdDataHeader[1,]
